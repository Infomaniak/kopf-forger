---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: resourceforger-account
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: resourceforger-role-cluster
rules:
  # Framework: knowing which other operators are running (i.e. peering).
  - apiGroups: [ kopf.dev ]
    resources: [ clusterkopfpeerings ]
    verbs: [ list, watch, patch, get ]

  # Framework: runtime observation of namespaces & CRDs (addition/deletion).
  - apiGroups: [ apiextensions.k8s.io ]
    resources: [ customresourcedefinitions ]
    verbs: [ list, watch ]
  - apiGroups: [ "" ]
    resources: [ namespaces ]
    verbs: [ list, watch ]

  # Framework: posting the events about the handlers progress/errors.
  - apiGroups: [events.k8s.io]
    resources: [events]
    verbs: [create]
  - apiGroups: [""]
    resources: [events]
    verbs: [create]

  # Application: watching & handling for the custom resource we declare.
  - apiGroups: [infomaniak.dev]
    resources: [resourceforgers]
    verbs: [list, watch, patch]

  # Application: other resources it produces and manipulates.
  # Here, we create and delete secret only, but we do not update them ever.
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: [list, get, create, delete, patch, update]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: resourceforger-rolebinding-cluster
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: resourceforger-role-cluster
subjects:
  - kind: ServiceAccount
    name: resourceforger-account
    namespace: resourceforger-operator
